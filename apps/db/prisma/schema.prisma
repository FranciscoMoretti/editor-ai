//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  schemas           = ["public"]
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

enum ThreadStatus {
  idle        @map("idle")
  busy        @map("busy")
  interrupted @map("interrupted")
  error       @map("error")

  @@schema("public")
}

enum RunStatus {
  pending     @map("pending")
  error       @map("error")
  success     @map("success")
  timeout     @map("timeout")
  interrupted @map("interrupted")
  running     @map("running")

  @@schema("public")
}

enum MultitaskStrategy {
  reject    @map("reject")
  rollback  @map("rollback")
  interrupt @map("interrupt")
  enqueue   @map("enqueue")

  @@schema("public")
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth() != null && user_id == auth().id)
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model posts {
  id         String   @id() @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  /// @omit
  user_id    String   @db.Uuid()
  title      String
  content    String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_posts_user")

  @@index([user_id], map: "idx_posts_user_id")
  @@schema("public")
}

/// @@auth
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id         String       @id() @db.Uuid()
  email      String       @unique()
  full_name  String?
  avatar_url String?
  created_at DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at DateTime?    @default(now()) @db.Timestamptz(6)
  posts      posts[]
  assistants asssitants[]

  @@schema("public")
}

/// @@allow('all', auth() != null && user_id == auth().id)
model threads {
  thread_id  String       @id() @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  /// @omit
  user_id    String
  created_at DateTime     @default(now()) @db.Timestamptz(6)
  updated_at DateTime     @default(now()) @db.Timestamptz(6)
  metadata   Json
  status     ThreadStatus @default(idle)
  values     Json         @default("{}")

  @@schema("public")
}

/// @@allow('all', auth() != null && user_id == auth().id)
model configs {
  config_id       String       @id() @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  /// @omit
  user_id         String
  tags            String[]
  recursion_limit Int
  configurable    Json
  assistants      asssitants[]

  @@schema("public")
}

/// @@allow('all', auth() != null && user_id == auth().id)
model asssitants {
  assistant_id String   @id() @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  user_id      String   @db.Uuid()
  graph_id     String
  config_id    String   @db.Uuid()
  config       configs  @relation(fields: [config_id], references: [config_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_assistant_config")
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @db.Timestamptz(6)
  metadata     Json     @default("{}")
  version      Int      @default(1)
  name         String   @default("Untitled")
  users        users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_assistant_user")

  @@schema("public")
}

/// @@allow('all', auth() != null && user_id == auth().id)
model runs {
  run_id             String            @id() @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  /// @omit
  user_id            String
  thread_id          String            @db.Uuid()
  assistant_id       String            @db.Uuid()
  created_at         DateTime          @default(now()) @db.Timestamptz(6)
  updated_at         DateTime          @default(now()) @db.Timestamptz(6)
  status             RunStatus
  metadata           Json
  kwargs             Json
  multitask_strategy MultitaskStrategy

  @@schema("public")
}
